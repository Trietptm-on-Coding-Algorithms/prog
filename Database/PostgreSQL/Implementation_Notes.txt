

Lexical Structure
	

SELECT * FROM ..;
UPDATE .. SET =;


Data Types

String
	ex 'This is A String'
	escape
		\b
		\f
		\n
		\r
		\t
		\489375 (octal number)
		\xAF  (hexadecimal number)
		\uXXX (16 bit representation of Unicode
	Dollar Quoting - both below are equal
		$sometag$Dollar Quote String$sometag$
		$Dollar Quote String$

Constants
	type 'string'
	'string'::type
	CAST( 'string' AS type )

Operators - 
	+ - * / < > = ~ ! @ # % ^ & | '' ? 
	-- and /* are comments
	[] used to select element of an array
	, denotes elements in a list
	: used to select slices of an array
	*  denotes fields or can represent a wildcard character
	. used in numeric constants seperate schema, table, and column names
	IS - tests for true/null/false
	ISNULL
	NOTNULL
	IN - test set membership
	BETWEEN - range containment
	OVERLAPS - time interval overlap
	LIKE ILIKE SIMILAR - string pattern matching
	< >
	=
	NOT
	AND
	OR

Value Expressions - an expression that results in a scalar. A scalar is essentially a set expression
	ex
		constant or literal
		column reference
		positional parameter reference
		subscripted expression
		field selection expression
		operator invocation
		function call
		aggregate expression
		window function call
		type cast
		collation expression	
		scalar subquery
		array constructor
		row constructor
		value expression in parentheses

Column reference
	EX "correlation.columnname"
Positional Paramter - a parameter that is used by a function
	EX $number
	EX "CREATE FUNCTION dept(text) RETURNS dept AS $$ SELECT * FROM dept WHERE name = $1 $$ LANGUAGE SQL;"
Subscript
	EX expression[subscript]
Field selection
	EX name.fieldname
Operator Invocations
Function Calls
Aggregate Expression - represents the application of an aggregate function acros the rows selected by a query. Reduces multiple inputs to a single output, such as a sum or average
Window Function Calls - represents the application of an aggregate function over some portion of the rows selected by a query
	General EX "functionName() OVER WindowDefinition"
Type Casts - Cast as expression to a certain type to manipulate
Collation - can be used to bring together information into a single field
Scalar Subqueries - a SELECTquery in parenthsees that returns exactly one row with one column
Array Constructors - an expression that build an array value using values for its member elements
	EX Array[1,2,3,4]
	EX ARRAY[]::integer[] (creates two dimensional array)
	EX ARRAY(SELECT Query)
Row Constructors - an expression that builds a row value
	EX ROW ( value1, value2, value3 )



!@#$%&^*()

Calling Functions

Create a function
	EX [ CREATE FUNCTION nameFunc(parameters,parameter2) RETURNS variable AS$$ Variables $$ LANGUAGE SQL IMMUTABLE STRICT;


Ways to call function with parameters
	Positional notation EX function(1,2,3,4)
	Named Notation EX function( a:= 1, b:=2 )
	Mixed Notation - combination of the above two types


!@#$%^&*() Table Basics

Table
	rows
	columns

Creating
	EX "CREATE TABLE my_first_table (column datatype, column datatype);"
	
Destroying
	EX  "DROP TABLE my_first_table;"
	EX "DROP TABLE my_first_table IF EXISTS;" less error prone

Default Values - can be an exprsesion
	EX "CREATE TABLE defaults ( product_number int, price numeric DEFAULT 9.99);"
	nextval() - supplies successive values froma  sequence object
		"CREATE TABLE products ( product_number SERIAL, ..... );"
	
Constraints.
Check Constraints - 
	generic Constraints EX " CREATE TABLE products ( price numeric CHECK (price > 0,.... );"
	Named Constraint EX " CREATE TABLE products ( price numeric CONSTRAINT positive_price CHECK (price > 0));"
	Constraint comparing columns EX " CREATE TABLE products ( price numeric, discount_price numeric, CHECK ( price > discounted_price) );"
	Not Null Constraint EX " CREATE TABLE products (product_number integer NOT NULL,....);"
	Unique Constraint EX " CREATE TABLE products ( product_number integer,....,UNIQUE(product_number) );"
	Primary Key EX " CREATE TABLE products (product_number integer PRIMARY KEY,....., PRIMARY KEY (product_number));"
	foreign Key EX "CREATE TABLE orders ( product_number integer REFERENCES products (product_number),...., product_number integer REFERENCES products,....., FOREIGN KEY (product_number) REFERENCES products (product_number));"
		Key phrases
			ON DELETE RESTRICT - prevent deletion of a referenced row
			ON DELETE CASCADE - rows referencing should be deleted as well
			ON DELETE NO ACTION - allows the deletion but raises an error afterwards.
			ON DELETE SET NULL - sets the foreign key to null
			ON DELETE SET DEFAULT - sets the foreign key to a default value
			(ON DELETE can be replaced with ON UPDATE)
	EXCLUDE - EX "EXCLUDE USING gist (column WITH &&)"

Unique - no other row can contain that value
Primary Key - essentially a unique and not null constraint that can be used as a unique identifier
Foreign Keys - specifies that the column should only contain values found in a column of A DIFFERENT table











SYSTEM COLUMNS

System columns - a column created by the system

"oid" - object identifier of a row
	32 bit values. May not be unique
	to use, you must use "WITH OIDS"
"tableoid" - oid of a table
"xmin" - the identity of the inserting transaction for this row version.
"cmin" - the command identifier within the inserting transaction
"xmax" - the identity of the deleting transaction, or zero for an undeleted row version
"cmax" - command identifier within the deleting transaction
"ctid" - physical location of the row version within its table.




Modifying Tables

ALTER STATEMENT
	"ALTER TABLE tableName ADD COLUMN columnName datatype;"

ADD COLUMN
	"ALTER TABLE tableName ADD COLUMN columnName datatype;"
Removing Column
	"ALTER TABLE tableName DROP COLUMN columnName;"
Adding Constraint
	"ALTER TABLE tableNAME ADD CHECK(CONSTRAINT, FOREIGN KEY, ETC);"
Removing Constraint
	"ALTER TABLE tableName DROP CONSTRAINT constraintName"
Change Default Value
	"ALTER TABLE tableName ALTER COLUMN columnName SET DEFAULT 'defaulted new';"
Change Data Type
	"ALTER TABLE tableName ALTER COLUMN price TYPE datatype;"
Rename Column
	"ALTER TABLE tableName RENAME COLUMN oldName TO newName;"
Renaming Table
	"ALTER TABLE products RENAME TO items;"














Priveleges

privelege - the ability to do certain things
	SELECT
	INSERT
	UPDATE
	DELETE
	TRUNCATE
	REFERENCES
	TRIGGER
	CREATE
	CONNECT
	TEMPORARY
	EXECUTE
	USAGE

Add Privilege
	"GRANT UPDATE ON tableName TO user;"
Revoke Privilege
	"REVOKE ALL ON accounts FROM PUBLIC;"





Schemas

Schema - a collection of tables. Also includes named objects, data types, functions, and operators.

Create a Schema
	"CREATE SCHEMA mySchema;"
Access Table
	"schema.table"
	"database.schema.table"
Create a table in Schema
	"CREATE TABLE schema.mytable (....);"
Drop Schema
	"DROP SCHEMA schemaName;"
Create Schema for another user
	"CREATE SCHEMA schemaName AUTHORIZATION username;"




Search Path - the default search path that a client will search in 
	"SHOW search_path;"
		first element - specifies the default schema
		second element - refers to fall back search
	search_path is a system variable

Schemas and Privileges - 
	EX "REVOKE CREATE ON SCHEMA public FROM PUBLIC"






----5.8 Inheritance

Table Inheritance - a table can inherit of all the data in another table
	EX "CREATE TABLE cities { .....data....} INHERITS (table1);"

ONLY keyword - the keyword will ensure that a query only applies to the targetted table, and not to any inherited tables
	EX "SELECT name, altitude FROM ONLY cities;"
* operator - indicates that all descendant tables are included
	EX "SELECT name, altitude FROM cities* WHERE altitude > 500"

Inheritance
	does not automatically propagate data from insert or copy commands to other tables
	check constraints are applied to sub tables


----"5.9 Partitioning"

Partition - split up a single logical table into smaller physical pieces.
	motivation
		query performance can be improved by moving irrelevant data to less relevant partitions
		performance can be improved by using a sequential scan instead of using an index
		bulk loads can be done by adding or removing partitions
		seldom used data can be migrated to cheaper and slower storage

PostGRESQL supports Partitioning through inheritance

Range Partition - table is partitioned into ranges defined by a key column or set of columns
List Partitioning - table is partitioned by explicitly listing which key values appear in each partition

Implementing Partition on PostGRESQL
	1. Create a master table.	
		create the columns here
		contains no data
		do not define check constraints unless they apply to all partitions
	2. Create Several partition tables that each inherit from master
	3. Add table constrinats to the partition tables to define allowed key values
		Constraints must guarantee that there is no overlap
	4. Create an index on the key columns
	5. Optional, define a trigger or rule to redirect data inserted into master table to lower tables
		instead of
	6. Ensure that a configuration setting in psotgresql.conf is not disabled
		"constraint_exclusion"
	
Managing Partitions

Dropping a partition table will delete all data in that table
Archive the table by removing the inheritance

Constraint Exclusion - query optimization technique. Scans constraints to only scan tables that should be scanned

EXPLAIN - postgresql help tool that shows how tables will be scanned
	EX " EXPLAIN SELECT count(*) FROM table1 WHERE date > DATE(); "

----"5.10 Foreign Data"

PostGRESQL implements some SQL/MED specifations which allows you to access data outside of PostGRESQL using regular SQL queries

Foreign Data - data not in the database
	Foreign tables are read only
Foreign Data Wrapper - a tool that grants access to an external data source


----"5.11 Other Database Objects"

List of Other database objects
	Views
	Functions and Operators
	Data types and domains
	triggers and rewrite rules

----"5.12 Dependency Tracking"

Data cannot be deleted that is dependent on other data.
	Use Cascade to delete on data that is dependent on that data
	EX "DROP TABLE products CASCADE"


----"6.1 Inserting Data"

INSERT - a command that creates a new row

SYNTAX
	"INSERT INTO tablename (column1, column2,....., columnN)  VALUES (data, data2, ...., dataN);"
	tablename is the name of the table
	the column tuple represents columns
	data tuple represents data

Insert commands can insert multiple data tuples


----"6.2 Updating Data"

	
UPDATE - a command that updates data

SYNTAX
	"UPDATE tablename SET column1 = data1,....., columnN = dataN WHERE constraint = constraint;"

----"6.3 Deleting Data"

DELETE - deletes data
	SYNTAX "DELETE FROM tablename WHERE column = constraint;"

----"7.1 Overview of Queries"

Query - process of retrieving data from a database
SELECT - in SQL, select is the command used to specify queries
	SYNTAX " SELECT select_list FROM table_expression [sort specification];"

----"7.2 Table Expressions"

Table expression - computes a table

Join Types.
Cross Join - for every possible combination of T1 and T2, the joined table will contain a row consisting of all columns in T1 followed by T2
	EX " T1 CROSS JOIN T2"
Qualified Join - a join that is conditional
	EX " T1 { [INNER] | {LEFT | RIGHT | FULL } [OUTER] } JOIN T2 ON boolean"
	EX " T1 { [INNER] | {LEFT | RIGHT | FULL } [OUTER] } JOIN T2 USING column1,...,columnN"
	EX " T1 NATURAL { [INNER] | {LEFT | RIGHT | FULL } [OUTER] } JOIN T2"
join condition - specified in on or using clause or implicitly by NATURAL. Determines which rows match
	ON - boolean expression
	USING - a list of columns contained in both tables. Forms a join on those columns.
	NATURAL - short hand form of using that specifies all columns shared by both tables. If no columns, it behaves like a CROSS JOIN.
Inner Join - for each row of T1, the joined table has a row for each row in T2 that satisfies the join condition
Left Outer Join - an inner join is performed. Then, for each row in T1 that does not satisfy the join condition with any row in T2, a joined row is added with null values in columns of T2. 
	Each row has atleast one row for each row in T1
Right Outer Join - Similar to Left outer join, except tables are reversed.
	Each row has atleast one row for each row in T2
Full Outer Join - inner join is performed. For each row in T1 that does not satisfy the join condition with any in T2 is added with NULLs and vice versa
	Each row has atleast one row for each row in T1 and T2


Table Alias - a name give to a table for the rest of the query.
	EX "table_reference AS alias"
Column Alias - a name given to a column for the rest of the query.
	EX "column_reference AS alias"

Subqueries are valid for joins. 
	Must be given a alias

Table Function - a function that produce a set of rows.

WHERE clause - a clause that allows a query to select based on a boolean condition

GROUP clause - used to group together rows that hve the same values
	EX" GROUP BY column1,..., columnN"
HAVING clause - a clause used to only show groups of interest


----"7.3 Select Lists"

SELECT list - constructs an intermediate virtual table by combining a number of abstractions

column labels - alias the columns as something else

DISTINCT keyword - a word that indicates that all results must be unique from any other row



----"7.4 Combining Queries"

UNION - appends the result of the second query and eliminates the duplicates
INTERSECT - returns all rows that are in both queries
EXCEPT - removes all rows from query2 in query1

----"7.5 Sorting Rows"

ORDER BY clause - used to set the sort order
	EX " ORDER BY sort_expression [ASC | DESC] [NULLS {FIRST | LAST} ] , sort expression2....."
Sort Expression - an expression used 

----"7.6 Limit and Offset"

Limit and Offset can be used to limit the number of rows that are retrieved by the rest of the query

LIMIT - no more than that many rows will be returned
	EX "SELECT * FROM tbl LIMIT 5;"
OFFSET - skip a certain number of rows before beginning to return rows
	EX "SELECT * FROM tbl OFFSET 3;"

----"7.7 VALUES lists"

VALUES - provides a way to generate a constant table that can be used in a query with having to create a populate a table
	VALUES is a table expression
	EX " VALUES (1, 'one'), (2, 'two'), (3, 'three');"

----"7.8 With Queries"

WITH - provides a way to write auxiliary statements for use in a larger query.
	WITH essentially deines temporary tables
	EX " WITH tmpTABLE AS ( SELECT * FROM tbl ) SELECT * FROM tmpTABLE;"
WITH RECURSIVE - will perform recursive caluclations inside of the WITH statement.

WITH Data modifying - insert, update, and delete can return rows by using the RETURNING clause to return modified rows.
	EX " WITH tbl AS ( DELETE FROM tbl_del WHERE condition RETURNING * );"


---------"Chapter 8 Data Types"

----"8.1 Numeric Types"

Integers
Float
Selectable Precision

----"8.2 Monetary Types"

"money" is data type

----"8.3 Character Types"

varchar() - variable length with limit
character(n) - fixed length blank padded
text - variable unlimited length
"char" - single byte character
name - internal type for object names

----"8.4 Binary Data Types"

bytea - 1 or 4 bytes plus the actual binary string
	specifally allows any combination of bits

Escape Formats - escape binary into hex, octal

----"8.5 Date/Time Types"
